datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator fakeData {
  provider = "prisma-generator-fake-data"
  output   = "./fake-data.ts"
}

model User {
  id            String          @id @default(cuid())
  ///FAKE:faker.person.fullName()
  name          String?
  ///FAKE:faker.internet.email()
  email         String          @unique
  ///FAKE:faker.date.anytime()
  emailVerified DateTime?
  ///FAKE:faker.image.avatar()
  image         String?

  ///FAKE:faker.date.anytime()
  createdAt     DateTime @default(now())
  ///FAKE:faker.date.anytime()
  updatedAt     DateTime @updatedAt
  posts         Post[]
  profile       Profile?
}

model Post {
  id        String   @id @default(cuid())
  ///FAKE:faker.string.uuid()
  userId    String
  ///FAKE:faker.image.url()
  imageUrl  String
  ///FAKE:faker.lorem.sentence()
  caption   String?
  ///FAKE:faker.date.anytime()
  createdAt DateTime @default(now())
  ///FAKE:faker.date.anytime()
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id         String   @id @default(cuid())
  ///FAKE:faker.string.uuid()
  userId     String   @unique
  ///FAKE:faker.lorem.paragraph()
  bio        String?
  ///FAKE:faker.image.avatar()
  avatarUrl  String?
  ///FAKE:faker.location.city()
  location   String?
  ///FAKE:[faker.lorem.word(), faker.lorem.word(), faker.lorem.word()]
  interests  String[] @default([])
  ///FAKE:faker.date.anytime()
  createdAt  DateTime @default(now())
  ///FAKE:faker.date.anytime()
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
